// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rcraam.h"
#include <Rcpp.h>

using namespace Rcpp;

// worstcase_l1
Rcpp::List worstcase_l1(Rcpp::NumericVector z, Rcpp::NumericVector q, double t);
RcppExport SEXP _rcraam_worstcase_l1(SEXP zSEXP, SEXP qSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(worstcase_l1(z, q, t));
    return rcpp_result_gen;
END_RCPP
}
// solve
Rcpp::List solve(Rcpp::DataFrame mdp, Rcpp::String algorithm);
RcppExport SEXP _rcraam_solve(SEXP mdpSEXP, SEXP algorithmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type mdp(mdpSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type algorithm(algorithmSEXP);
    rcpp_result_gen = Rcpp::wrap(solve(mdp, algorithm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rcraam_worstcase_l1", (DL_FUNC) &_rcraam_worstcase_l1, 3},
    {"_rcraam_solve", (DL_FUNC) &_rcraam_solve, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcraam(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
